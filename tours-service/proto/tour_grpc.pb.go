// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tour.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MarketplaceTour_GetPublishedTours_FullMethodName = "/MarketplaceTour/GetPublishedTours"
	MarketplaceTour_GetAuthorTours_FullMethodName    = "/MarketplaceTour/GetAuthorTours"
	MarketplaceTour_GetTour_FullMethodName           = "/MarketplaceTour/GetTour"
	MarketplaceTour_DeleteTour_FullMethodName        = "/MarketplaceTour/DeleteTour"
)

// MarketplaceTourClient is the client API for MarketplaceTour service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceTourClient interface {
	GetPublishedTours(ctx context.Context, in *Page, opts ...grpc.CallOption) (*TourResponseList, error)
	GetAuthorTours(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*TourResponseList, error)
	GetTour(ctx context.Context, in *TourId, opts ...grpc.CallOption) (*TourResponse, error)
	DeleteTour(ctx context.Context, in *TourId, opts ...grpc.CallOption) (*TourResponse, error)
}

type marketplaceTourClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceTourClient(cc grpc.ClientConnInterface) MarketplaceTourClient {
	return &marketplaceTourClient{cc}
}

func (c *marketplaceTourClient) GetPublishedTours(ctx context.Context, in *Page, opts ...grpc.CallOption) (*TourResponseList, error) {
	out := new(TourResponseList)
	err := c.cc.Invoke(ctx, MarketplaceTour_GetPublishedTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceTourClient) GetAuthorTours(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*TourResponseList, error) {
	out := new(TourResponseList)
	err := c.cc.Invoke(ctx, MarketplaceTour_GetAuthorTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceTourClient) GetTour(ctx context.Context, in *TourId, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, MarketplaceTour_GetTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceTourClient) DeleteTour(ctx context.Context, in *TourId, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, MarketplaceTour_DeleteTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceTourServer is the server API for MarketplaceTour service.
// All implementations must embed UnimplementedMarketplaceTourServer
// for forward compatibility
type MarketplaceTourServer interface {
	GetPublishedTours(context.Context, *Page) (*TourResponseList, error)
	GetAuthorTours(context.Context, *AuthorId) (*TourResponseList, error)
	GetTour(context.Context, *TourId) (*TourResponse, error)
	DeleteTour(context.Context, *TourId) (*TourResponse, error)
	mustEmbedUnimplementedMarketplaceTourServer()
}

// UnimplementedMarketplaceTourServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceTourServer struct {
}

func (UnimplementedMarketplaceTourServer) GetPublishedTours(context.Context, *Page) (*TourResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedTours not implemented")
}
func (UnimplementedMarketplaceTourServer) GetAuthorTours(context.Context, *AuthorId) (*TourResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorTours not implemented")
}
func (UnimplementedMarketplaceTourServer) GetTour(context.Context, *TourId) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTour not implemented")
}
func (UnimplementedMarketplaceTourServer) DeleteTour(context.Context, *TourId) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTour not implemented")
}
func (UnimplementedMarketplaceTourServer) mustEmbedUnimplementedMarketplaceTourServer() {}

// UnsafeMarketplaceTourServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceTourServer will
// result in compilation errors.
type UnsafeMarketplaceTourServer interface {
	mustEmbedUnimplementedMarketplaceTourServer()
}

func RegisterMarketplaceTourServer(s grpc.ServiceRegistrar, srv MarketplaceTourServer) {
	s.RegisterService(&MarketplaceTour_ServiceDesc, srv)
}

func _MarketplaceTour_GetPublishedTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceTourServer).GetPublishedTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceTour_GetPublishedTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceTourServer).GetPublishedTours(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceTour_GetAuthorTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceTourServer).GetAuthorTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceTour_GetAuthorTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceTourServer).GetAuthorTours(ctx, req.(*AuthorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceTour_GetTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceTourServer).GetTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceTour_GetTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceTourServer).GetTour(ctx, req.(*TourId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceTour_DeleteTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceTourServer).DeleteTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceTour_DeleteTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceTourServer).DeleteTour(ctx, req.(*TourId))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketplaceTour_ServiceDesc is the grpc.ServiceDesc for MarketplaceTour service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceTour_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MarketplaceTour",
	HandlerType: (*MarketplaceTourServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublishedTours",
			Handler:    _MarketplaceTour_GetPublishedTours_Handler,
		},
		{
			MethodName: "GetAuthorTours",
			Handler:    _MarketplaceTour_GetAuthorTours_Handler,
		},
		{
			MethodName: "GetTour",
			Handler:    _MarketplaceTour_GetTour_Handler,
		},
		{
			MethodName: "DeleteTour",
			Handler:    _MarketplaceTour_DeleteTour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour.proto",
}
