// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: authoringKeyPoint/keyPoint.proto

package authoringKeyPoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthoringKeyPoint_CreateKeyPoint_FullMethodName = "/AuthoringKeyPoint/CreateKeyPoint"
	AuthoringKeyPoint_UpdateKeyPoint_FullMethodName = "/AuthoringKeyPoint/UpdateKeyPoint"
	AuthoringKeyPoint_DeleteKeyPoint_FullMethodName = "/AuthoringKeyPoint/DeleteKeyPoint"
)

// AuthoringKeyPointClient is the client API for AuthoringKeyPoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthoringKeyPointClient interface {
	CreateKeyPoint(ctx context.Context, in *KeyPointCreate, opts ...grpc.CallOption) (*KeyPoint, error)
	UpdateKeyPoint(ctx context.Context, in *KeyPointUpdate, opts ...grpc.CallOption) (*KeyPoint, error)
	DeleteKeyPoint(ctx context.Context, in *KeyPointId, opts ...grpc.CallOption) (*KeyPoint, error)
}

type authoringKeyPointClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthoringKeyPointClient(cc grpc.ClientConnInterface) AuthoringKeyPointClient {
	return &authoringKeyPointClient{cc}
}

func (c *authoringKeyPointClient) CreateKeyPoint(ctx context.Context, in *KeyPointCreate, opts ...grpc.CallOption) (*KeyPoint, error) {
	out := new(KeyPoint)
	err := c.cc.Invoke(ctx, AuthoringKeyPoint_CreateKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoringKeyPointClient) UpdateKeyPoint(ctx context.Context, in *KeyPointUpdate, opts ...grpc.CallOption) (*KeyPoint, error) {
	out := new(KeyPoint)
	err := c.cc.Invoke(ctx, AuthoringKeyPoint_UpdateKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoringKeyPointClient) DeleteKeyPoint(ctx context.Context, in *KeyPointId, opts ...grpc.CallOption) (*KeyPoint, error) {
	out := new(KeyPoint)
	err := c.cc.Invoke(ctx, AuthoringKeyPoint_DeleteKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthoringKeyPointServer is the server API for AuthoringKeyPoint service.
// All implementations must embed UnimplementedAuthoringKeyPointServer
// for forward compatibility
type AuthoringKeyPointServer interface {
	CreateKeyPoint(context.Context, *KeyPointCreate) (*KeyPoint, error)
	UpdateKeyPoint(context.Context, *KeyPointUpdate) (*KeyPoint, error)
	DeleteKeyPoint(context.Context, *KeyPointId) (*KeyPoint, error)
	mustEmbedUnimplementedAuthoringKeyPointServer()
}

// UnimplementedAuthoringKeyPointServer must be embedded to have forward compatible implementations.
type UnimplementedAuthoringKeyPointServer struct {
}

func (UnimplementedAuthoringKeyPointServer) CreateKeyPoint(context.Context, *KeyPointCreate) (*KeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPoint not implemented")
}
func (UnimplementedAuthoringKeyPointServer) UpdateKeyPoint(context.Context, *KeyPointUpdate) (*KeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyPoint not implemented")
}
func (UnimplementedAuthoringKeyPointServer) DeleteKeyPoint(context.Context, *KeyPointId) (*KeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyPoint not implemented")
}
func (UnimplementedAuthoringKeyPointServer) mustEmbedUnimplementedAuthoringKeyPointServer() {}

// UnsafeAuthoringKeyPointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthoringKeyPointServer will
// result in compilation errors.
type UnsafeAuthoringKeyPointServer interface {
	mustEmbedUnimplementedAuthoringKeyPointServer()
}

func RegisterAuthoringKeyPointServer(s grpc.ServiceRegistrar, srv AuthoringKeyPointServer) {
	s.RegisterService(&AuthoringKeyPoint_ServiceDesc, srv)
}

func _AuthoringKeyPoint_CreateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringKeyPointServer).CreateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoringKeyPoint_CreateKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringKeyPointServer).CreateKeyPoint(ctx, req.(*KeyPointCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthoringKeyPoint_UpdateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringKeyPointServer).UpdateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoringKeyPoint_UpdateKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringKeyPointServer).UpdateKeyPoint(ctx, req.(*KeyPointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthoringKeyPoint_DeleteKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringKeyPointServer).DeleteKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthoringKeyPoint_DeleteKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringKeyPointServer).DeleteKeyPoint(ctx, req.(*KeyPointId))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthoringKeyPoint_ServiceDesc is the grpc.ServiceDesc for AuthoringKeyPoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthoringKeyPoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthoringKeyPoint",
	HandlerType: (*AuthoringKeyPointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeyPoint",
			Handler:    _AuthoringKeyPoint_CreateKeyPoint_Handler,
		},
		{
			MethodName: "UpdateKeyPoint",
			Handler:    _AuthoringKeyPoint_UpdateKeyPoint_Handler,
		},
		{
			MethodName: "DeleteKeyPoint",
			Handler:    _AuthoringKeyPoint_DeleteKeyPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authoringKeyPoint/keyPoint.proto",
}
