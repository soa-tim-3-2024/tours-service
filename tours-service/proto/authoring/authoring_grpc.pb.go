// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: authoring/authoring.proto

package authoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authoring_AddTour_FullMethodName     = "/Authoring/AddTour"
	Authoring_UpdateTour_FullMethodName  = "/Authoring/UpdateTour"
	Authoring_PublishTour_FullMethodName = "/Authoring/PublishTour"
	Authoring_ArchiveTour_FullMethodName = "/Authoring/ArchiveTour"
)

// AuthoringClient is the client API for Authoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthoringClient interface {
	AddTour(ctx context.Context, in *TourCreate, opts ...grpc.CallOption) (*TourResponseAuthor, error)
	UpdateTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*TourResponseAuthor, error)
	PublishTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*PublishResponse, error)
	ArchiveTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*PublishResponse, error)
}

type authoringClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthoringClient(cc grpc.ClientConnInterface) AuthoringClient {
	return &authoringClient{cc}
}

func (c *authoringClient) AddTour(ctx context.Context, in *TourCreate, opts ...grpc.CallOption) (*TourResponseAuthor, error) {
	out := new(TourResponseAuthor)
	err := c.cc.Invoke(ctx, Authoring_AddTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoringClient) UpdateTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*TourResponseAuthor, error) {
	out := new(TourResponseAuthor)
	err := c.cc.Invoke(ctx, Authoring_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoringClient) PublishTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, Authoring_PublishTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authoringClient) ArchiveTour(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, Authoring_ArchiveTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthoringServer is the server API for Authoring service.
// All implementations must embed UnimplementedAuthoringServer
// for forward compatibility
type AuthoringServer interface {
	AddTour(context.Context, *TourCreate) (*TourResponseAuthor, error)
	UpdateTour(context.Context, *TourUpdate) (*TourResponseAuthor, error)
	PublishTour(context.Context, *TourUpdate) (*PublishResponse, error)
	ArchiveTour(context.Context, *TourUpdate) (*PublishResponse, error)
	mustEmbedUnimplementedAuthoringServer()
}

// UnimplementedAuthoringServer must be embedded to have forward compatible implementations.
type UnimplementedAuthoringServer struct {
}

func (UnimplementedAuthoringServer) AddTour(context.Context, *TourCreate) (*TourResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTour not implemented")
}
func (UnimplementedAuthoringServer) UpdateTour(context.Context, *TourUpdate) (*TourResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedAuthoringServer) PublishTour(context.Context, *TourUpdate) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTour not implemented")
}
func (UnimplementedAuthoringServer) ArchiveTour(context.Context, *TourUpdate) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTour not implemented")
}
func (UnimplementedAuthoringServer) mustEmbedUnimplementedAuthoringServer() {}

// UnsafeAuthoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthoringServer will
// result in compilation errors.
type UnsafeAuthoringServer interface {
	mustEmbedUnimplementedAuthoringServer()
}

func RegisterAuthoringServer(s grpc.ServiceRegistrar, srv AuthoringServer) {
	s.RegisterService(&Authoring_ServiceDesc, srv)
}

func _Authoring_AddTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringServer).AddTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authoring_AddTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringServer).AddTour(ctx, req.(*TourCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authoring_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authoring_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringServer).UpdateTour(ctx, req.(*TourUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authoring_PublishTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringServer).PublishTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authoring_PublishTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringServer).PublishTour(ctx, req.(*TourUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authoring_ArchiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthoringServer).ArchiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authoring_ArchiveTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthoringServer).ArchiveTour(ctx, req.(*TourUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// Authoring_ServiceDesc is the grpc.ServiceDesc for Authoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authoring",
	HandlerType: (*AuthoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTour",
			Handler:    _Authoring_AddTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _Authoring_UpdateTour_Handler,
		},
		{
			MethodName: "PublishTour",
			Handler:    _Authoring_PublishTour_Handler,
		},
		{
			MethodName: "ArchiveTour",
			Handler:    _Authoring_ArchiveTour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authoring/authoring.proto",
}
