syntax = "proto3";

option go_package = "proto/authoring";
import "google/protobuf/timestamp.proto";


service Authoring {
  rpc AddTour (TourCreate) returns (TourResponseAuthor) {} 
  rpc UpdateTour (TourUpdate) returns (TourResponseAuthor) {}
  rpc PublishTour (TourUpdate) returns (publishResponse) {}
  rpc ArchiveTour (TourUpdate) returns (publishResponse) {}
}

message publishResponse {
    int32 response = 1;
}

message TourCreate {
    int64 authorId = 1;
    string name = 2;
    string description = 3;
    int32 difficulty = 4;
    repeated string tags = 5;
    enum TourStatus {
        Draft = 0;
        Published = 1;
        Archived = 2;
        Ready = 3;
    }
    TourStatus status = 6;
    double price = 7;
    enum TourCategory {
        Adventure = 0;
        FamilyTrips = 1;
        Cruise = 2;
        Cultural = 3;
    }
    TourCategory category = 8;
}

message TourUpdate {
    int64 Id = 1;
    int64 authorId = 2;
    string name = 3;
    string description = 4;
    int32 difficulty = 5;
    repeated string tags = 6;
    enum TourStatus {
        Draft = 0;
        Published = 1;
        Archived = 2;
        Ready = 3;
    }
    TourStatus status = 7;
    double price = 8;
    enum TourCategory {
        Adventure = 0;
        FamilyTrips = 1;
        Cruise = 2;
        Cultural = 3;
    }
    TourCategory category = 9;
}

message TourResponseAuthor {
    int64 id = 1;
    int64 authorId = 2;
    string name = 3;
    string description = 4;
    int32 difficulty = 5;
    repeated string tags = 6;
    enum TourStatus {
        Draft = 0;
        Published = 1;
        Archived = 2;
        Ready = 3;
    }
    TourStatus status = 7;
    double price = 8;
    bool isDeleted = 9;
    double distance = 10;
    double averageRating = 11;
    repeated KeyPointResponseAuthor keyPoints = 12;
    repeated TourDurationAuthor durations = 13;
    google.protobuf.Timestamp publishDate = 14;
    google.protobuf.Timestamp archiveDate = 15;
    enum TourCategoryAuthor {
        Adventure = 0;
        FamilyTrips = 1;
        Cruise = 2;
        Cultural = 3;
    }
    TourCategoryAuthor category = 16;
}

message KeyPointResponseAuthor {
    int64 id = 1;
    int64 tourId = 2;
    string name = 3;
    string description = 4;
    double longitude = 5;
    double latitude = 6;
    string locationAddress = 7;
    string imagePath = 8;
    int64 order = 9;
    bool haveSecret = 10;
    KeyPointSecretResponseAuthor secret = 11;
}

message KeyPointSecretResponseAuthor {
    repeated string images = 1;
    string description = 2;
}

message TourDurationAuthor {
    int32 duration = 1;
    enum TransportType {
        Walking = 0;
        Bicycle = 1;
        Car = 2;
    }
    TransportType transportType = 2;
}
